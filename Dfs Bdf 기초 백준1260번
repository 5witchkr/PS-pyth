입력 
N = 정점의 개수
M = 간선의 개수
V = 탐색 시작할 정점의 번호

두 정점 사이 여러개 간선이 있을 수 있음

첫줄에는 DFS수행결과, 둘째줄에는 BFS 수행결과를 출력

```
#정점,간선,시작정점 입력
N, M, V = map(int, input().split())

# 영행렬 생성
matrix = [[0]*(N+1)for i in range(N+1)]

##방문체크할것 방문하면 1로
visited = [0]*(N+1)

#입력받는 두 값에 대해 영행열(matrix)에 1을 삽입
for i in range(M):
    a, b = map(int, input().split())
    ##햇갈리는부분
    matrix[a][b] = matrix[b][a] = 1

def Dfs(V):
    visited[V] = 1
    print(V, end=' ')
    #재귀선언 ( V와 인접한곳을 찾고 방문하지 않았다면 실행 )
    for i in range(1, N+1):
        if visited[i]==0 and matrix[V][i]==1:
            Dfs(i)

def Bfs(V):
    #방문해야 할 곳을 순서대로 넣을 큐
    queue = [V]
    visited[V] = 1
    #큐 안에 데이터가 없을때까지
    while queue:
        V = queue.pop(0)
        print(V, end=' ')
        for i in range(1, N+1):
            if visited[i]==0 and matrix[V][i]==1:
                queue.append(i)
                visited[i]=1

Dfs(V)
print() #end 때문에 붙어나와서 떼줌
visited = [0]*(N+1)##visited초기화
Bfs(V)
```
